<?php

/**
 * @file
 * Uploads a zip file of images on Amazon S3.
 */

/**
 * Implements hook_help().
 */
function s3_zip_image_upload_help($path, $arg) {
  switch ($path) {

    case 'admin/help#s3_zip_image_upload':
      $output = '';
      $output .= '<h3>' . t('Introduction') . '</h3>';
      $output .= '<p>' . t('S3 Image Upload module allows to upload a zip file of images on Amazon S3.');
      $output .= '<h3>' . t('Requirements') . '</h3>';
      $output .= '<h4>' . t('amazon s3 php class library') . '</h4>';
      $output .= t('You will need to download amazon s3 php class from the site <a href="https://github.com/tpyo/amazon-s3-php-class" target= "_blank"> https://github.com/tpyo/amazon-s3-php-class</a>. Extract the amazon-s3-php-class files to the "/sites/all/libraries/" directory.).');
      $output .= t('You can download this module using drush command "drush dl s3_zip_image_upload" after that do "drush en s3_zip_image_upload" it will download the amazon-s3-php-class library as well automatically');
      $output .= '<h3>' . t('Installation / Configuration') . '</h4>';
      $output .= '1. Extract the module files to the "/modules" directory. It should now
        contain a "s3 zip image upload" directory.<br/>';
      $output .= '2. Enable the module in the "Administration panel > Modules > Multilingual - Internationalization" section.<br/>';
      $output .= '3. User System Configuration enter the folder name where images will extracted on Amazon S3 and Save.<br/>';
      return $output;
  }
}

/**
 * Implements hook_libraries_info().
 *
 * Defines external library for module.
 */
function s3_zip_image_upload_libraries_info() {
  $libraries['amazon-s3-php-class'] = array(
    'name' => 'Amazon S3 php class',
    'vendor url' => 'https://github.com/tpyo/amazon-s3-php-class',
    'download url' => 'https://github.com/tpyo/amazon-s3-php-class/archive/master.zip',
    'version callback' => 's3_zip_image_upload_version_callback',
    'files' => array(
      'php' => array(
        'S3.php',
      ),
    ),
  );

  return $libraries;
}

/**
 * Callback for version of library.
 *
 * @return boolean.
 *    Returns true.
 */
function s3_zip_image_upload_version_callback() {
  return TRUE;
}

function s3_zip_image_upload_data($images, $count, $highest_row, $selected_type, $aws_url, $directory_name, $bucket_name, $access_key, $secret_key, &$context) {

  if (!class_exists('S3')) {
    include '/libraries/amazon-s3-php-class/S3.php';
  }
  // AWS access info.
  if (!defined('AWSACCESSKEY')) {
    define('AWSACCESSKEY', $access_key);
  }
  if (!defined('AWSSECRETKEY')) {
    define('AWSSECRETKEY', $secret_key);
  }
  // Instantiate the class.
  $s3 = new S3(AWSACCESSKEY, AWSSECRETKEY);
  $context['message'] = t("Now processing :i of :highest_row", array(':i' => $count, ":highest_row" => $highest_row));
  foreach ($images as $file) {
    $servername = $_SERVER['DOCUMENT_ROOT'];
    $explode = explode('/', $servername);
    $explode_end = end($explode);
    if (empty($explode_end)) {
      $product_file_path = "sites/default/files/$directory_name/";
      $product_filename = $_SERVER['DOCUMENT_ROOT'] . $product_file_path . '' . $file->filename;
    }
    else {
      $product_file_path = "/sites/default/files/$directory_name/";
      $product_filename = $_SERVER['DOCUMENT_ROOT'] . $product_file_path . '' . $file->filename;
    }

    $file_img = $file->filename;
    $handle = fopen($product_filename, "rb");
    fclose($handle);
    // Initiate Imagic Library for Images.
    if ($selected_type == 'images') {
      $product_image = "s3fs-public/$directory_name/" . $file_img;
      $s3->putObjectFile($product_filename, $bucket_name, $product_image, S3::ACL_PUBLIC_READ);
    }
    $context['results'] = $selected_type;
    // Unlink local files.
    unlink($product_filename);
  }
}

function s3_zip_image_upload_data_finished($success, $results, $operations) {

// The 'success' parameter means no fatal PHP errors were detected. All
// other error management should be handled using 'results'.
  if ($success) {
    drupal_set_message(t('Successfully Uploaded @result to Amazon S3.', array(
      '@result' => ucfirst($results),
            )
        )
    );
  }
  if ($success) {
    drupal_set_message(t('Successfully Uploaded @result to Amazon S3.', array(
      '@result' => ucfirst($results),
            )
        )
    );
  }
// Display any errors while batch processing.
  else {
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array(
      '%error_operation' => $error_operation[0],
      '@arguments' => print_r($error_operation[1], TRUE),
        )
    );
    drupal_set_message($message, 'error');
  }
}
